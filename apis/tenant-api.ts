/* tslint:disable */
/* eslint-disable */
/**
 * Terapi.Web.Api-v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DeclineTenantInvitationResponse } from '../models';
import { InvitationStatus } from '../models';
import { InviteTenantByApplicationIntegrationIdResponse } from '../models';
import { InviteTenantResponse } from '../models';
import { TenantInvitetenantBody } from '../models';
import { TenantInvitetenantBody1 } from '../models';
import { TenantInvitetenantBody2 } from '../models';
import { TenantInvitetenantbyapplicationintegrationidBody } from '../models';
import { TenantInvitetenantbyapplicationintegrationidBody1 } from '../models';
import { TenantInvitetenantbyapplicationintegrationidBody2 } from '../models';
import { TenantUpdatetenantconnectionBody } from '../models';
import { TenantUpdatetenantconnectionBody1 } from '../models';
import { TenantUpdatetenantconnectionBody2 } from '../models';
import { UpdateTenantConnectionResponse } from '../models';
import { UserTenantListResponse } from '../models';
/**
 * TenantApi - axios parameter creator
 * @export
 */
export const TenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_996_101 | TenantNotFound | Tenant Not Found | | 20_996_102 | UnknownExceptionWhileFetchingTenant | Unknown exception when checking tenant existence. | | 20_996_103 | UnknownExceptionWhileDecliningTenant | Unknown exception when declining tenant. | | 20_996_104 | TenantIsNotInInvitedStatus |  | | 20_996_105 | UnknownExceptionWhileCheckingIfTenantIsInCorrectStatus |  |
         * @summary 20_996
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantDeclineTenantIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tenantDeclineTenantIdGet.');
            }
            const localVarPath = `/tenant/decline-tenant/{id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
         * @summary 20_998
         * @param {TenantInvitetenantbyapplicationintegrationidBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantInviteTenantByApplicationIntegrationIdPost: async (body?: TenantInvitetenantbyapplicationintegrationidBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant/invite-tenant-by-application-integration-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
         * @summary 20_998
         * @param {TenantInvitetenantBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantInviteTenantPost: async (body?: TenantInvitetenantBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant/invite-tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_997_101 | TenantNotFound | Tenant not found. | | 20_997_102 | UnknownExceptionWhenCheckTenantExistence | Unknown exception when checking tenant existence. | | 20_997_103 | UnknownExceptionWhenUpdateTenantConnection | Unknown exception when updating tenant connection. |
         * @summary 20_997
         * @param {TenantUpdatetenantconnectionBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantUpdateTenantConnectionPost: async (body?: TenantUpdatetenantconnectionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant/update-tenant-connection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_999_101 | UnknownExceptionWhenTryingFetchTenants | Unknown exception when trying to fetch tenants. | | 20_999_102 | UserNotFound | User not found. | | 20_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 20_999
         * @param {InvitationStatus} [invitationStatus]   0 &#x3D; Invited  1 &#x3D; Accepted  2 &#x3D; Declined
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantUserTenantListGet: async (invitationStatus?: InvitationStatus, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant/user-tenant-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (invitationStatus !== undefined) {
                localVarQueryParameter['InvitationStatus'] = invitationStatus;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['PerPage'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_996_101 | TenantNotFound | Tenant Not Found | | 20_996_102 | UnknownExceptionWhileFetchingTenant | Unknown exception when checking tenant existence. | | 20_996_103 | UnknownExceptionWhileDecliningTenant | Unknown exception when declining tenant. | | 20_996_104 | TenantIsNotInInvitedStatus |  | | 20_996_105 | UnknownExceptionWhileCheckingIfTenantIsInCorrectStatus |  |
         * @summary 20_996
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantDeclineTenantIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeclineTenantInvitationResponse>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).tenantDeclineTenantIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
         * @summary 20_998
         * @param {TenantInvitetenantbyapplicationintegrationidBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantInviteTenantByApplicationIntegrationIdPost(body?: TenantInvitetenantbyapplicationintegrationidBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InviteTenantByApplicationIntegrationIdResponse>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).tenantInviteTenantByApplicationIntegrationIdPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
         * @summary 20_998
         * @param {TenantInvitetenantBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantInviteTenantPost(body?: TenantInvitetenantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InviteTenantResponse>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).tenantInviteTenantPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_997_101 | TenantNotFound | Tenant not found. | | 20_997_102 | UnknownExceptionWhenCheckTenantExistence | Unknown exception when checking tenant existence. | | 20_997_103 | UnknownExceptionWhenUpdateTenantConnection | Unknown exception when updating tenant connection. |
         * @summary 20_997
         * @param {TenantUpdatetenantconnectionBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantUpdateTenantConnectionPost(body?: TenantUpdatetenantconnectionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateTenantConnectionResponse>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).tenantUpdateTenantConnectionPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_999_101 | UnknownExceptionWhenTryingFetchTenants | Unknown exception when trying to fetch tenants. | | 20_999_102 | UserNotFound | User not found. | | 20_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 20_999
         * @param {InvitationStatus} [invitationStatus]   0 &#x3D; Invited  1 &#x3D; Accepted  2 &#x3D; Declined
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantUserTenantListGet(invitationStatus?: InvitationStatus, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserTenantListResponse>>> {
            const localVarAxiosArgs = await TenantApiAxiosParamCreator(configuration).tenantUserTenantListGet(invitationStatus, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_996_101 | TenantNotFound | Tenant Not Found | | 20_996_102 | UnknownExceptionWhileFetchingTenant | Unknown exception when checking tenant existence. | | 20_996_103 | UnknownExceptionWhileDecliningTenant | Unknown exception when declining tenant. | | 20_996_104 | TenantIsNotInInvitedStatus |  | | 20_996_105 | UnknownExceptionWhileCheckingIfTenantIsInCorrectStatus |  |
         * @summary 20_996
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantDeclineTenantIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclineTenantInvitationResponse>> {
            return TenantApiFp(configuration).tenantDeclineTenantIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
         * @summary 20_998
         * @param {TenantInvitetenantbyapplicationintegrationidBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantInviteTenantByApplicationIntegrationIdPost(body?: TenantInvitetenantbyapplicationintegrationidBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InviteTenantByApplicationIntegrationIdResponse>> {
            return TenantApiFp(configuration).tenantInviteTenantByApplicationIntegrationIdPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
         * @summary 20_998
         * @param {TenantInvitetenantBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantInviteTenantPost(body?: TenantInvitetenantBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InviteTenantResponse>> {
            return TenantApiFp(configuration).tenantInviteTenantPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_997_101 | TenantNotFound | Tenant not found. | | 20_997_102 | UnknownExceptionWhenCheckTenantExistence | Unknown exception when checking tenant existence. | | 20_997_103 | UnknownExceptionWhenUpdateTenantConnection | Unknown exception when updating tenant connection. |
         * @summary 20_997
         * @param {TenantUpdatetenantconnectionBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantUpdateTenantConnectionPost(body?: TenantUpdatetenantconnectionBody, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateTenantConnectionResponse>> {
            return TenantApiFp(configuration).tenantUpdateTenantConnectionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_999_101 | UnknownExceptionWhenTryingFetchTenants | Unknown exception when trying to fetch tenants. | | 20_999_102 | UserNotFound | User not found. | | 20_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 20_999
         * @param {InvitationStatus} [invitationStatus]   0 &#x3D; Invited  1 &#x3D; Accepted  2 &#x3D; Declined
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantUserTenantListGet(invitationStatus?: InvitationStatus, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserTenantListResponse>> {
            return TenantApiFp(configuration).tenantUserTenantListGet(invitationStatus, page, perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_996_101 | TenantNotFound | Tenant Not Found | | 20_996_102 | UnknownExceptionWhileFetchingTenant | Unknown exception when checking tenant existence. | | 20_996_103 | UnknownExceptionWhileDecliningTenant | Unknown exception when declining tenant. | | 20_996_104 | TenantIsNotInInvitedStatus |  | | 20_996_105 | UnknownExceptionWhileCheckingIfTenantIsInCorrectStatus |  |
     * @summary 20_996
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async tenantDeclineTenantIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeclineTenantInvitationResponse>> {
        return TenantApiFp(this.configuration).tenantDeclineTenantIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
     * @summary 20_998
     * @param {TenantInvitetenantbyapplicationintegrationidBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async tenantInviteTenantByApplicationIntegrationIdPost(body?: TenantInvitetenantbyapplicationintegrationidBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InviteTenantByApplicationIntegrationIdResponse>> {
        return TenantApiFp(this.configuration).tenantInviteTenantByApplicationIntegrationIdPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_998_101 | ApplicationIntegrationNotFound | Application integration not found. | | 20_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking application existence. | | 20_998_103 | UnknownExceptionWhenCreateTenant | Unknown exception when createing tenant. | | 20_998_104 | UnknownExceptionWhenSendingEmailToInvitedEmailAddress | Unknown exception when sending email to invited email address. | | 20_998_105 | UserNotFound | User not found. | | 20_998_106 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 20_998_107 | UnknownExceptionWhenCreateUserTenant | Unknown exception when creating user tenant. | | 20_998_108 | UnknownExceptionWhenCreatingEmailContent | Unknown exception when creating email content. | | 20_998_109 | UnknownExceptionWhenCreatingEmailAcceptInvitationUrl |  | | 20_998_110 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 20_998_111 | UnknownExceptionWhenAddingTenantInOrganization |  | | 20_998_112 | UnknownExceptionWhenCreateTenantUser |  |
     * @summary 20_998
     * @param {TenantInvitetenantBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async tenantInviteTenantPost(body?: TenantInvitetenantBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InviteTenantResponse>> {
        return TenantApiFp(this.configuration).tenantInviteTenantPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_997_101 | TenantNotFound | Tenant not found. | | 20_997_102 | UnknownExceptionWhenCheckTenantExistence | Unknown exception when checking tenant existence. | | 20_997_103 | UnknownExceptionWhenUpdateTenantConnection | Unknown exception when updating tenant connection. |
     * @summary 20_997
     * @param {TenantUpdatetenantconnectionBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async tenantUpdateTenantConnectionPost(body?: TenantUpdatetenantconnectionBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateTenantConnectionResponse>> {
        return TenantApiFp(this.configuration).tenantUpdateTenantConnectionPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 20_999_101 | UnknownExceptionWhenTryingFetchTenants | Unknown exception when trying to fetch tenants. | | 20_999_102 | UserNotFound | User not found. | | 20_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
     * @summary 20_999
     * @param {InvitationStatus} [invitationStatus]   0 &#x3D; Invited  1 &#x3D; Accepted  2 &#x3D; Declined
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public async tenantUserTenantListGet(invitationStatus?: InvitationStatus, page?: number, perPage?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserTenantListResponse>> {
        return TenantApiFp(this.configuration).tenantUserTenantListGet(invitationStatus, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
}
