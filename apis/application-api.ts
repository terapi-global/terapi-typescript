/* tslint:disable */
/* eslint-disable */
/**
 * Terapi.Web.Api-v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApplicationCreateBody } from '../models';
import { ApplicationCreateBody1 } from '../models';
import { ApplicationCreateBody2 } from '../models';
import { ApplicationUpdateBody } from '../models';
import { ApplicationUpdateBody1 } from '../models';
import { ApplicationUpdateBody2 } from '../models';
import { CreateApplicationResponse } from '../models';
import { DeleteApplicationResponse } from '../models';
import { UpdateApplicationResponse } from '../models';
import { UserApplicationListResponse } from '../models';
/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_999_101 | ApplicationNameAlreadyExist | Application name already exists. | | 15_999_102 | UnknownExceptionWhenValidateApplicationNameUniqueness | Unknown exception when validating application name uniqueness. | | 15_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 15_999_104 | UserNotFound | User not found. | | 15_999_105 | UnknownExceptionWhenCreateOrganization |  |
         * @summary 15_999
         * @param {ApplicationCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationCreatePost: async (body?: ApplicationCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/application/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_997_101 | ApplicationNotFound | Application not found. | | 15_997_102 | UnknownExceptionWhenFetchApplicationExistence | Unknown exception when fetching application existence. | | 15_997_103 | UnknownExceptionWhenDeleteApplication | Unknown exception when deleting application. |
         * @summary 15_997
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationDeleteDelete: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/application/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_996_101 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. | | 15_996_102 | UserNotFound | User not found. | | 15_996_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 15_996
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationListGet: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/application/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['PerPage'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_998_101 | ApplicationNotFound | Application not found. | | 15_998_102 | UnknownExceptionWhenFetchApplication | Unknown exception when fetching application. | | 15_998_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 15_998
         * @param {ApplicationUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationUpdatePut: async (body?: ApplicationUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/application/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_999_101 | ApplicationNameAlreadyExist | Application name already exists. | | 15_999_102 | UnknownExceptionWhenValidateApplicationNameUniqueness | Unknown exception when validating application name uniqueness. | | 15_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 15_999_104 | UserNotFound | User not found. | | 15_999_105 | UnknownExceptionWhenCreateOrganization |  |
         * @summary 15_999
         * @param {ApplicationCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationCreatePost(body?: ApplicationCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateApplicationResponse>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationCreatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_997_101 | ApplicationNotFound | Application not found. | | 15_997_102 | UnknownExceptionWhenFetchApplicationExistence | Unknown exception when fetching application existence. | | 15_997_103 | UnknownExceptionWhenDeleteApplication | Unknown exception when deleting application. |
         * @summary 15_997
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationDeleteDelete(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteApplicationResponse>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationDeleteDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_996_101 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. | | 15_996_102 | UserNotFound | User not found. | | 15_996_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 15_996
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationListGet(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserApplicationListResponse>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationListGet(page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_998_101 | ApplicationNotFound | Application not found. | | 15_998_102 | UnknownExceptionWhenFetchApplication | Unknown exception when fetching application. | | 15_998_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 15_998
         * @param {ApplicationUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationUpdatePut(body?: ApplicationUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateApplicationResponse>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationUpdatePut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_999_101 | ApplicationNameAlreadyExist | Application name already exists. | | 15_999_102 | UnknownExceptionWhenValidateApplicationNameUniqueness | Unknown exception when validating application name uniqueness. | | 15_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 15_999_104 | UserNotFound | User not found. | | 15_999_105 | UnknownExceptionWhenCreateOrganization |  |
         * @summary 15_999
         * @param {ApplicationCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationCreatePost(body?: ApplicationCreateBody, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateApplicationResponse>> {
            return ApplicationApiFp(configuration).applicationCreatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_997_101 | ApplicationNotFound | Application not found. | | 15_997_102 | UnknownExceptionWhenFetchApplicationExistence | Unknown exception when fetching application existence. | | 15_997_103 | UnknownExceptionWhenDeleteApplication | Unknown exception when deleting application. |
         * @summary 15_997
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationDeleteDelete(id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteApplicationResponse>> {
            return ApplicationApiFp(configuration).applicationDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_996_101 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. | | 15_996_102 | UserNotFound | User not found. | | 15_996_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 15_996
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationListGet(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserApplicationListResponse>> {
            return ApplicationApiFp(configuration).applicationListGet(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_998_101 | ApplicationNotFound | Application not found. | | 15_998_102 | UnknownExceptionWhenFetchApplication | Unknown exception when fetching application. | | 15_998_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
         * @summary 15_998
         * @param {ApplicationUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationUpdatePut(body?: ApplicationUpdateBody, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateApplicationResponse>> {
            return ApplicationApiFp(configuration).applicationUpdatePut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationApi - object-oriented interface
 * @export
 * @class ApplicationApi
 * @extends {BaseAPI}
 */
export class ApplicationApi extends BaseAPI {
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_999_101 | ApplicationNameAlreadyExist | Application name already exists. | | 15_999_102 | UnknownExceptionWhenValidateApplicationNameUniqueness | Unknown exception when validating application name uniqueness. | | 15_999_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. | | 15_999_104 | UserNotFound | User not found. | | 15_999_105 | UnknownExceptionWhenCreateOrganization |  |
     * @summary 15_999
     * @param {ApplicationCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public async applicationCreatePost(body?: ApplicationCreateBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateApplicationResponse>> {
        return ApplicationApiFp(this.configuration).applicationCreatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_997_101 | ApplicationNotFound | Application not found. | | 15_997_102 | UnknownExceptionWhenFetchApplicationExistence | Unknown exception when fetching application existence. | | 15_997_103 | UnknownExceptionWhenDeleteApplication | Unknown exception when deleting application. |
     * @summary 15_997
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public async applicationDeleteDelete(id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteApplicationResponse>> {
        return ApplicationApiFp(this.configuration).applicationDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_996_101 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. | | 15_996_102 | UserNotFound | User not found. | | 15_996_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
     * @summary 15_996
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public async applicationListGet(page?: number, perPage?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserApplicationListResponse>> {
        return ApplicationApiFp(this.configuration).applicationListGet(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 15_998_101 | ApplicationNotFound | Application not found. | | 15_998_102 | UnknownExceptionWhenFetchApplication | Unknown exception when fetching application. | | 15_998_103 | UnknownExceptionWhenInsertApplication | Unknown exception when inserting application. |
     * @summary 15_998
     * @param {ApplicationUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public async applicationUpdatePut(body?: ApplicationUpdateBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateApplicationResponse>> {
        return ApplicationApiFp(this.configuration).applicationUpdatePut(body, options).then((request) => request(this.axios, this.basePath));
    }
}
