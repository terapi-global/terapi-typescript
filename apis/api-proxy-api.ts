/* tslint:disable */
/* eslint-disable */
/**
 * Terapi.Web.Api-v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiproxyEndpointBody } from '../models';
import { ApiproxyEndpointBody1 } from '../models';
import { ApiproxyEndpointBody10 } from '../models';
import { ApiproxyEndpointBody11 } from '../models';
import { ApiproxyEndpointBody2 } from '../models';
import { ApiproxyEndpointBody3 } from '../models';
import { ApiproxyEndpointBody4 } from '../models';
import { ApiproxyEndpointBody5 } from '../models';
import { ApiproxyEndpointBody6 } from '../models';
import { ApiproxyEndpointBody7 } from '../models';
import { ApiproxyEndpointBody8 } from '../models';
import { ApiproxyEndpointBody9 } from '../models';
import { CallActionResponse } from '../models';
import { OAuth2ChallengeResponse } from '../models';
import { UnifiedContactResponse } from '../models';
import { UnifiedContactsListResponse } from '../models';
/**
 * ApiProxyApi - axios parameter creator
 * @export
 */
export const ApiProxyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody6} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyEndpointDelete: async (endpoint: string, body?: ApiproxyEndpointBody6, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling apiProxyEndpointDelete.');
            }
            const localVarPath = `/api-proxy/{endpoint}`
                .replace(`{${"endpoint"}}`, encodeURIComponent(String(endpoint)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} integrationName 
         * @param {string} endpoint 
         * @param {string} xTenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyEndpointGet: async (integrationName: string, endpoint: string, xTenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationName' is not null or undefined
            if (integrationName === null || integrationName === undefined) {
                throw new RequiredError('integrationName','Required parameter integrationName was null or undefined when calling apiProxyEndpointGet.');
            }
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling apiProxyEndpointGet.');
            }
            // verify required parameter 'xTenantId' is not null or undefined
            if (xTenantId === null || xTenantId === undefined) {
                throw new RequiredError('xTenantId','Required parameter xTenantId was null or undefined when calling apiProxyEndpointGet.');
            }
            const localVarPath = `/api-proxy/{endpoint}`
                .replace(`{${"integrationName"}}`, encodeURIComponent(String(integrationName)))
                .replace(`{${"endpoint"}}`, encodeURIComponent(String(endpoint)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (xTenantId !== undefined && xTenantId !== null) {
                localVarHeaderParameter['X-Tenant-Id'] = String(JSON.stringify(xTenantId));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody9} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyEndpointPatch: async (endpoint: string, body?: ApiproxyEndpointBody9, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling apiProxyEndpointPatch.');
            }
            const localVarPath = `/api-proxy/{endpoint}`
                .replace(`{${"endpoint"}}`, encodeURIComponent(String(endpoint)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyEndpointPost: async (endpoint: string, body?: ApiproxyEndpointBody3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling apiProxyEndpointPost.');
            }
            const localVarPath = `/api-proxy/{endpoint}`
                .replace(`{${"endpoint"}}`, encodeURIComponent(String(endpoint)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyEndpointPut: async (endpoint: string, body?: ApiproxyEndpointBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling apiProxyEndpointPut.');
            }
            const localVarPath = `/api-proxy/{endpoint}`
                .replace(`{${"endpoint"}}`, encodeURIComponent(String(endpoint)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_999_101 | TenantNotFound |  | | 21_999_102 | IntegrationNotFound |  | | 21_999_103 | UnknownExceptionWhenOAuth2Challenge |  | | 21_999_104 | IntegrationIsNotEnabled |  | | 21_999_105 | UnknownExceptionWhenCheckIfIntegrationIsEnabled |  | | 21_999_106 | UnknownExceptionWhenFetchTenant |  | | 21_999_107 | UnknownExceptionWhenTryToGetTenantTokens |  | | 21_999_108 | UnknownExceptionWhenReturnResponse |  | | 21_999_109 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 21_999_110 | UnknownExceptionWhenAddingTenantInOrganization |  | | 21_999_111 | UnknownExceptionWhenTryToCreateTenantUser |  | | 21_999_112 | UnknownExceptionWhenTryToCheckIfTenantUserExists |  |
         * @summary 21_999
         * @param {string} [tenantId] 
         * @param {string} [externalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyOauth2ChallengeGet: async (tenantId?: string, externalId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-proxy/oauth2/challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tenantId !== undefined) {
                localVarQueryParameter['TenantId'] = tenantId;
            }

            if (externalId !== undefined) {
                localVarQueryParameter['ExternalId'] = externalId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyUnifiedContactsExternalIdGet: async (externalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalId' is not null or undefined
            if (externalId === null || externalId === undefined) {
                throw new RequiredError('externalId','Required parameter externalId was null or undefined when calling apiProxyUnifiedContactsExternalIdGet.');
            }
            const localVarPath = `/api-proxy/unified/contacts/{externalId}`
                .replace(`{${"externalId"}}`, encodeURIComponent(String(externalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProxyUnifiedContactsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-proxy/unified/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiProxyApi - functional programming interface
 * @export
 */
export const ApiProxyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody6} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointDelete(endpoint: string, body?: ApiproxyEndpointBody6, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CallActionResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyEndpointDelete(endpoint, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} integrationName 
         * @param {string} endpoint 
         * @param {string} xTenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointGet(integrationName: string, endpoint: string, xTenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CallActionResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyEndpointGet(integrationName, endpoint, xTenantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody9} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointPatch(endpoint: string, body?: ApiproxyEndpointBody9, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CallActionResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyEndpointPatch(endpoint, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointPost(endpoint: string, body?: ApiproxyEndpointBody3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CallActionResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyEndpointPost(endpoint, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointPut(endpoint: string, body?: ApiproxyEndpointBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CallActionResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyEndpointPut(endpoint, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_999_101 | TenantNotFound |  | | 21_999_102 | IntegrationNotFound |  | | 21_999_103 | UnknownExceptionWhenOAuth2Challenge |  | | 21_999_104 | IntegrationIsNotEnabled |  | | 21_999_105 | UnknownExceptionWhenCheckIfIntegrationIsEnabled |  | | 21_999_106 | UnknownExceptionWhenFetchTenant |  | | 21_999_107 | UnknownExceptionWhenTryToGetTenantTokens |  | | 21_999_108 | UnknownExceptionWhenReturnResponse |  | | 21_999_109 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 21_999_110 | UnknownExceptionWhenAddingTenantInOrganization |  | | 21_999_111 | UnknownExceptionWhenTryToCreateTenantUser |  | | 21_999_112 | UnknownExceptionWhenTryToCheckIfTenantUserExists |  |
         * @summary 21_999
         * @param {string} [tenantId] 
         * @param {string} [externalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyOauth2ChallengeGet(tenantId?: string, externalId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OAuth2ChallengeResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyOauth2ChallengeGet(tenantId, externalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyUnifiedContactsExternalIdGet(externalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UnifiedContactResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyUnifiedContactsExternalIdGet(externalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyUnifiedContactsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UnifiedContactsListResponse>>> {
            const localVarAxiosArgs = await ApiProxyApiAxiosParamCreator(configuration).apiProxyUnifiedContactsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApiProxyApi - factory interface
 * @export
 */
export const ApiProxyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody6} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointDelete(endpoint: string, body?: ApiproxyEndpointBody6, options?: AxiosRequestConfig): Promise<AxiosResponse<CallActionResponse>> {
            return ApiProxyApiFp(configuration).apiProxyEndpointDelete(endpoint, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} integrationName 
         * @param {string} endpoint 
         * @param {string} xTenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointGet(integrationName: string, endpoint: string, xTenantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CallActionResponse>> {
            return ApiProxyApiFp(configuration).apiProxyEndpointGet(integrationName, endpoint, xTenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody9} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointPatch(endpoint: string, body?: ApiproxyEndpointBody9, options?: AxiosRequestConfig): Promise<AxiosResponse<CallActionResponse>> {
            return ApiProxyApiFp(configuration).apiProxyEndpointPatch(endpoint, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointPost(endpoint: string, body?: ApiproxyEndpointBody3, options?: AxiosRequestConfig): Promise<AxiosResponse<CallActionResponse>> {
            return ApiProxyApiFp(configuration).apiProxyEndpointPost(endpoint, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
         * @summary 21_997
         * @param {string} endpoint 
         * @param {ApiproxyEndpointBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyEndpointPut(endpoint: string, body?: ApiproxyEndpointBody, options?: AxiosRequestConfig): Promise<AxiosResponse<CallActionResponse>> {
            return ApiProxyApiFp(configuration).apiProxyEndpointPut(endpoint, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_999_101 | TenantNotFound |  | | 21_999_102 | IntegrationNotFound |  | | 21_999_103 | UnknownExceptionWhenOAuth2Challenge |  | | 21_999_104 | IntegrationIsNotEnabled |  | | 21_999_105 | UnknownExceptionWhenCheckIfIntegrationIsEnabled |  | | 21_999_106 | UnknownExceptionWhenFetchTenant |  | | 21_999_107 | UnknownExceptionWhenTryToGetTenantTokens |  | | 21_999_108 | UnknownExceptionWhenReturnResponse |  | | 21_999_109 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 21_999_110 | UnknownExceptionWhenAddingTenantInOrganization |  | | 21_999_111 | UnknownExceptionWhenTryToCreateTenantUser |  | | 21_999_112 | UnknownExceptionWhenTryToCheckIfTenantUserExists |  |
         * @summary 21_999
         * @param {string} [tenantId] 
         * @param {string} [externalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyOauth2ChallengeGet(tenantId?: string, externalId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OAuth2ChallengeResponse>> {
            return ApiProxyApiFp(configuration).apiProxyOauth2ChallengeGet(tenantId, externalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyUnifiedContactsExternalIdGet(externalId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UnifiedContactResponse>> {
            return ApiProxyApiFp(configuration).apiProxyUnifiedContactsExternalIdGet(externalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProxyUnifiedContactsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<UnifiedContactsListResponse>> {
            return ApiProxyApiFp(configuration).apiProxyUnifiedContactsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiProxyApi - object-oriented interface
 * @export
 * @class ApiProxyApi
 * @extends {BaseAPI}
 */
export class ApiProxyApi extends BaseAPI {
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
     * @summary 21_997
     * @param {string} endpoint 
     * @param {ApiproxyEndpointBody6} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyEndpointDelete(endpoint: string, body?: ApiproxyEndpointBody6, options?: AxiosRequestConfig) : Promise<AxiosResponse<CallActionResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyEndpointDelete(endpoint, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
     * @summary 21_997
     * @param {string} integrationName 
     * @param {string} endpoint 
     * @param {string} xTenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyEndpointGet(integrationName: string, endpoint: string, xTenantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CallActionResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyEndpointGet(integrationName, endpoint, xTenantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
     * @summary 21_997
     * @param {string} endpoint 
     * @param {ApiproxyEndpointBody9} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyEndpointPatch(endpoint: string, body?: ApiproxyEndpointBody9, options?: AxiosRequestConfig) : Promise<AxiosResponse<CallActionResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyEndpointPatch(endpoint, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
     * @summary 21_997
     * @param {string} endpoint 
     * @param {ApiproxyEndpointBody3} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyEndpointPost(endpoint: string, body?: ApiproxyEndpointBody3, options?: AxiosRequestConfig) : Promise<AxiosResponse<CallActionResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyEndpointPost(endpoint, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_997_101 | TenantNotFound |  | | 21_997_102 | IntegrationNotFound |  | | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  | | 21_997_104 | UnknownExceptionWhenCallAction |  | | 21_997_105 | IntegrationIsNotEnabled |  |
     * @summary 21_997
     * @param {string} endpoint 
     * @param {ApiproxyEndpointBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyEndpointPut(endpoint: string, body?: ApiproxyEndpointBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<CallActionResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyEndpointPut(endpoint, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ### Error Codes | Code | Name | Message | | :--- | :--- | :--- | | 21_999_101 | TenantNotFound |  | | 21_999_102 | IntegrationNotFound |  | | 21_999_103 | UnknownExceptionWhenOAuth2Challenge |  | | 21_999_104 | IntegrationIsNotEnabled |  | | 21_999_105 | UnknownExceptionWhenCheckIfIntegrationIsEnabled |  | | 21_999_106 | UnknownExceptionWhenFetchTenant |  | | 21_999_107 | UnknownExceptionWhenTryToGetTenantTokens |  | | 21_999_108 | UnknownExceptionWhenReturnResponse |  | | 21_999_109 | UnknownExceptionWhenAddingTenantInKeycloak |  | | 21_999_110 | UnknownExceptionWhenAddingTenantInOrganization |  | | 21_999_111 | UnknownExceptionWhenTryToCreateTenantUser |  | | 21_999_112 | UnknownExceptionWhenTryToCheckIfTenantUserExists |  |
     * @summary 21_999
     * @param {string} [tenantId] 
     * @param {string} [externalId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyOauth2ChallengeGet(tenantId?: string, externalId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OAuth2ChallengeResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyOauth2ChallengeGet(tenantId, externalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} externalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyUnifiedContactsExternalIdGet(externalId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UnifiedContactResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyUnifiedContactsExternalIdGet(externalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiProxyApi
     */
    public async apiProxyUnifiedContactsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<UnifiedContactsListResponse>> {
        return ApiProxyApiFp(this.configuration).apiProxyUnifiedContactsGet(options).then((request) => request(this.axios, this.basePath));
    }
}
